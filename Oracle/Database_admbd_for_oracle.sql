/*
PRIMERO EJECUTAR ESTAS 3 PRIMERAS LINEAS DE CODIGO SQL QUE CREARA EL USER CON PERMISOS
DESPUES EJECUTAR LO SIGUIENTE DESDE LA SECUENCIA SEQ_FOR_ID HASTA EL FINAL
*/
CREATE USER C##AdmBD IDENTIFIED BY root;
ALTER USER C##Admbd QUOTA UNLIMITED ON USERS;
GRANT CONNECT, RESOURCE TO C##AdmBD;

/*
DESDE AQUÍ HASTA EL FINAL SELECCIONAR TODO Y EJECUTAR, ESO SI UNA VEZ
SE ENCUENTRE DENTRO DEL USUARIO ADMBD CREADO ANTERIORMENTE.
*/
CREATE SEQUENCE seq_for_ID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE TABLE DEPARTAMENTOS (
    ID_DEPARTAMENTO Number PRIMARY KEY,
    NOMBRE_DEPARTAMENTO VARCHAR(100)
);

CREATE OR REPLACE TRIGGER departamentos_id
BEFORE INSERT ON DEPARTAMENTOS
FOR EACH ROW
BEGIN
    :NEW.ID_DEPARTAMENTO := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE EMPLEADOS (
    ID_EMPLEADO NUMBER PRIMARY KEY,
    NOMBRES VARCHAR(100),
    CARGO VARCHAR(100),
    SALARIO NUMBER,
    DEPARTAMENTO NUMBER NOT NULL,
    FECHA_INGRESO DATE,
    FECHA_RETIRO DATE null,
    foreign key(DEPARTAMENTO) references departamentos(ID_DEPARTAMENTO)
);

CREATE OR REPLACE TRIGGER empleados_id
BEFORE INSERT ON EMPLEADOS
FOR EACH ROW
BEGIN
    :NEW.ID_EMPLEADO := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE SALARIOS_HISTORICOS (
    ID NUMBER PRIMARY KEY,
    ID_EMPLEADO NUMBER(10),
    FECHA_CAMBIO DATE,
    NUEVO_SALARIO NUMBER,
    foreign key(ID_EMPLEADO) references EMPLEADOS(ID_EMPLEADO) on delete cascade
);

CREATE OR REPLACE TRIGGER salarios_h_id
BEFORE INSERT ON SALARIOS_HISTORICOS
FOR EACH ROW
BEGIN
    :NEW.ID := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE PERMISOS_VACACIONES (
    ID_PERMISO NUMBER PRIMARY KEY,
    ID_EMPLEADO NUMBER(10),
    FECHA_INICIO DATE,
    FECHA_FIN DATE,
    MOTIVO VARCHAR(100),
    foreign key(ID_EMPLEADO) references EMPLEADOS(ID_EMPLEADO) on delete cascade
);

CREATE OR REPLACE TRIGGER permisos_v_id
BEFORE INSERT ON PERMISOS_VACACIONES
FOR EACH ROW
BEGIN
    :NEW.ID_PERMISO := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE EVALUACIONES_DESEMPENO (
    ID_EVALUACION NUMBER PRIMARY KEY,
    ID_EMPLEADO NUMBER(10),
    PUNTUACION NUMBER,
    OBSERVACIONES VARCHAR(100),
    FECHA_EVALUACION DATE,
    foreign key(ID_EMPLEADO) references EMPLEADOS(ID_EMPLEADO)
);

CREATE OR REPLACE TRIGGER evaluaciones_d_id
BEFORE INSERT ON EVALUACIONES_DESEMPENO
FOR EACH ROW
BEGIN
    :NEW.ID_EVALUACION := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE CONCEPTOS (
    ID NUMBER PRIMARY KEY,
    NOMBRE VARCHAR(100),
    SIGNO VARCHAR(100)
);

CREATE OR REPLACE TRIGGER conceptos_id
BEFORE INSERT ON CONCEPTOS
FOR EACH ROW
BEGIN
    :NEW.ID := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE PERIODOS (
    ID NUMBER primary key,
    DESCRIPCION VARCHAR(100),
    FECHA_INICIAL DATE,
    FECHA_FINAL DATE,
    ESTADO VARCHAR(100)
);

CREATE OR REPLACE TRIGGER periodos_id
BEFORE INSERT ON PERIODOS
FOR EACH ROW
BEGIN
    :NEW.ID := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE CONCEPTOS_SALARIO (
	ID_CONCEPTOS NUMBER primary Key,
    ID_PERIODO NUMBER(10),
    ID_CONCEPTO NUMBER(10),
    ID_EMPLEADO NUMBER(10),
    MONTO NUMBER,
    FECHA_LIQUIDACION DATE,
    foreign key(ID_PERIODO) references PERIODOS(ID),
    foreign key(ID_CONCEPTO) references CONCEPTOS(ID),
    foreign key(ID_EMPLEADO) references EMPLEADOS(ID_EMPLEADO) on delete cascade
);

CREATE OR REPLACE TRIGGER conceptos_s_id
BEFORE INSERT ON CONCEPTOS_SALARIO
FOR EACH ROW
BEGIN
    :NEW.ID_CONCEPTOS := seq_for_id.NEXTVAL;
END;
/

CREATE TABLE EMPLEADOS_VACACIONES (
    ID_VACACION NUMBER primary key,
    ID_EMPLEADO NUMBER(10),
    PERIODO_ANUAL DATE,
    SALDO_DIAS NUMBER(10),
    FECHA_ACTUALIZACION DATE,
    FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADOS (ID_EMPLEADO) on delete cascade
);

CREATE OR REPLACE TRIGGER empleados_v_id
BEFORE INSERT ON EMPLEADOS_VACACIONES
FOR EACH ROW
BEGIN
    :NEW.ID_VACACION := seq_for_id.NEXTVAL;
END;
/